SPRING BOOT

- Realizar a configuraÃ§Ã£o do projeto selecionando o Generators como SPRING BOOT, JDK 17. ApÃ³s isso escolher quais dependÃªncias quer instalar na geraÃ§Ã£o do projeto.
NÃ£o esquecer de selecionar LOADER MAVEN


ANOTAÃ‡Ã•ES SPRING BOOT

Aqui estÃ¡ um resumo objetivo e direto de cada anotaÃ§Ã£o usada em Spring Boot para criar APIs REST:

ğŸ“Œ AnotaÃ§Ãµes para Criar um Controller REST
AnotaÃ§Ã£o	FunÃ§Ã£o
@RestController	Indica que a classe Ã© um controller REST, retornando os dados diretamente no corpo da resposta (sem precisar de @ResponseBody em cada mÃ©todo).
@RequestMapping	Define a URL base para os endpoints do controlador.
ğŸ“Œ AnotaÃ§Ãµes para Mapeamento de RequisiÃ§Ãµes
AnotaÃ§Ã£o	FunÃ§Ã£o
@GetMapping	Mapeia requisiÃ§Ãµes HTTP GET (usada para buscar dados).
@PostMapping	Mapeia requisiÃ§Ãµes HTTP POST (usada para enviar dados e criar recursos).
ğŸ“Œ AnotaÃ§Ãµes para Configurar Respostas
AnotaÃ§Ã£o	FunÃ§Ã£o
@ResponseStatus	Define o cÃ³digo de status HTTP que serÃ¡ retornado (exemplo: 200 OK, 201 Created).
@ResponseBody	Indica que o valor retornado pelo mÃ©todo serÃ¡ o corpo da resposta HTTP (nÃ£o necessÃ¡rio em @RestController).

ğŸ“Œ Exemplo PrÃ¡tico
@RestController
@RequestMapping("/usuarios") // Define a URL base para "/usuarios"
public class UsuarioController {

    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK) // Define o status HTTP como 200 OK
    public Usuario buscarUsuario(@PathVariable Long id) {
        return new Usuario(id, "Victor", "victor@email.com");
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED) // Define o status HTTP como 201 Created
    public Usuario criarUsuario(@RequestBody Usuario usuario) {
        return usuario; // Aqui normalmente salvaria no banco
    }
}
âœ… ExplicaÃ§Ã£o do cÃ³digo acima:

@RestController: Indica que a classe Ã© um controlador REST.
@RequestMapping("/usuarios"): Define que todas as requisiÃ§Ãµes desse controller comeÃ§am com /usuarios.
@GetMapping("/{id}"): Quando alguÃ©m acessar /usuarios/{id}, o mÃ©todo retorna um usuÃ¡rio.
@ResponseStatus(HttpStatus.OK): Retorna 200 OK para GET.
@PostMapping: Mapeia POST /usuarios para criar um novo usuÃ¡rio.
@ResponseStatus(HttpStatus.CREATED): Retorna 201 Created ao criar um novo usuÃ¡rio.
@ResponseBody: Retorna os dados diretamente como JSON (implÃ­cito em @RestController).
ğŸ“Œ Resumo Final
@RestController â†’ Marca a classe como um controller REST.
@RequestMapping â†’ Define a URL base dos endpoints.
@GetMapping / @PostMapping â†’ Mapeia requisiÃ§Ãµes GET/POST.
@ResponseStatus â†’ Define o status HTTP da resposta.
@ResponseBody â†’ Retorna o conteÃºdo diretamente no corpo da resposta (nÃ£o necessÃ¡rio com @RestController).


Exemplo de ENDPOINT para salvar dados no banco
@PostMapping(value = "/salvar")/*Mapeia a URL*/
    public ResponseEntity<Usuario> salvar(@RequestBody Usuario usuario) {
        Usuario user = usuarioRepository.save(usuario);
        return new ResponseEntity<Usuario>(user, HttpStatus.CREATED);
    }



RESPONSE ENTITY
ğŸ“Œ O que Ã© ResponseEntity?
ResponseEntity<T> Ã© uma classe do Spring Boot usada para personalizar a resposta HTTP de uma API REST.

Com ela, podemos definir:
âœ… O corpo da resposta (dados retornados).
âœ… O status HTTP (200 OK, 201 Created, 404 Not Found, etc.).
âœ… Os headers da resposta (informaÃ§Ãµes adicionais).

ğŸ“Œ Exemplo bÃ¡sico
java
Copiar
Editar
@GetMapping("/{id}")
public ResponseEntity<Usuario> buscarUsuario(@PathVariable Long id) {
    Usuario usuario = usuarioService.buscarPorId(id);
    return ResponseEntity.ok(usuario); // Retorna 200 OK com o usuÃ¡rio no corpo
}
Se encontrar o usuÃ¡rio: retorna 200 OK com os dados.
Se nÃ£o encontrar: podemos retornar 404 Not Found.
ğŸ“Œ Quando usar?
ğŸ”¹ Para definir status HTTP personalizados.
ğŸ”¹ Para incluir headers na resposta.
ğŸ”¹ Para retornar diferentes status dependendo da lÃ³gica da API.